---
layout: post
title: Boosters in action
category: Boosters
---

<%= toc %>

### Test Boosters Gem

The [Test Boosters](https://github.com/renderedtext/test-boosters) gem is an
open source test runner that runs your tests in multiple test jobs. It is used
on Semaphore to support the execution of boosted builds. The Test Booster gem
comes preinstalled in Semaphore boxes.

If you notice any issues with the test booster gem, please report it as an issue
on the [GitHub repository](https://github.com/renderedtext/test-boosters/issues).

We are also glad to receive contributions via
[pull requests](https://github.com/renderedtext/test-boosters/pulls).

### Boosters for RSpec

#### Supported versions

Boosters currently supports following RSpec versions:
- `3.0`
- `3.1`
- `3.2`
- `3.3`
- `3.4`
- `3.5`
- `3.6`

#### How Boosters run your RSpec suite

Boosters CLI runs your RSpec tests using `rspec_booster` command:
```
rspec_booster --job <job>/<job_count>
```
It uses `~/rspec_split_configuration.json` file in order to look for your job configuration.

Assuming you have the following configuration within your `~/rspec_split_configuration.json` file:
```
[
  { "files": ["spec/spec_1.rb", "spec/spec_2.rb"] },
  { "files": ["spec/spec_3.rb", "spec/spec_4.rb"] },
  { "files": ["spec/spec_5.rb", "spec/spec_6.rb"] }
]
```

And you run your specs using the following command:
```
rspec_booster --job 1/3
```

This would result with following RSpec command under the hood:
```
bundle exec rspec --format documentation --format json --out /home/<user>/rspec_report.json spec/spec_1.rb spec/spec_2.rb
```

As you can see, it builds and runs RSpec command which output is then formatted as json and redirected to `~/rspec_report.json`.
The report file contains durations of your test files.

#### Pass additional flags to RSpec

If you want to invoke RSpec runner with additional flags you can do it by
specifying them within `TB_RSPEC_OPTIONS` environment variable like following:
```
TB_RSPEC_OPTIONS='--fail-fast=3' rspec_booster --job 4/32
```
This results in following RSpec command under the hood:
```
bundle exec rspec --fail-fast=3 --format documentation --format json --out /home/<user>/rspec_report.json <file_list>
```

#### Customize RSpec configuration used by Boosters

You can customize your RSpec configuration in any way you need. Though some of the RSpec options do not work properly when used with Boosters.
RSpec [filtering](https://relishapp.com/rspec/rspec-core/v/3-6/docs/filtering) option can cause unexpected behaviour when it's used with Boosters. This option can cause builds with unbalanced Boosted jobs, since your specs are distributed across many jobs.

If you notice any unexpected behaviour of your test suite with Boosters, we encourage you to contact us at ???. Though if you think it is a bug in Boosters gem, feel free to [create an issue](https://github.com/renderedtext/test-boosters/issues/new). There are lot of the RSpec use cases and unfortunately we won't be able to support all of them.

### Boosters for Cucumber

#### Supported versions

Test Boosters currently supports following Cucumber versions:
...

#### How do Boosters run your Cucumber scenarios

Boosters CLI runs your Cucumber scenarios using `cucumber_booster` command:
```
cucumber_booster --job <job>/<job_count>
```
This command uses `~/cucumber_split_configuration.json` file in order to
look for your job's split configuration.

Assuming that you have following split configuration located at the $HOME
directory:
```
[
  { "files": ["features/feature_1.feature", "features/feature_2.feature"] },
  { "files": ["features/feature_3.feature", "features/feature_4.feature"] },
  { "files": ["features/feature_5.feature", "features/feature_6.feature"] }
]
```

And you run your features with `cucumber_booster` command:
```
cucumber_booster --job 1/3
```

Under the hood, Boosters command invokes Cucumber with the following
command:
```
bundle exec cucumber features/feature_1.feature features/feature_2.feature
```

At the end of the chain, you have Cucumber run your features.

#### Customize Cucumber configuration used by Boosters

You can customize Cucumber configuration by introducing additional
[profiles](https://github.com/cucumber/cucumber/wiki/cucumber.yml)
within your `cucumber.yml` file. Only make sure you append them
to the default one since Test Boosters run Cucumber like following:
```
bundle exec cucumber <file_list>
```

Test Boosters create separate `semaphoreci` profile within your `cucumber.yml` configuration,
and appends it to the default one. This way your custom defined configuration
stays unmodified. This is handled by our
[semaphore_cucumber_booster_config](https://github.com/renderedtext/cucumber_booster_config) gem which is open sourced.

### Troubleshooting
